#!/usr/bin/env python3

################################################################################
# splits pdb data into training, validation and testing data sets
#
# (C) 2020 Bryan Kolaczkowski, University of Florida, Gainesville, FL USA
# Released under GNU General Public License (GPL)
# bryank@ufl.edu
################################################################################

# he he :) - get path to this running file to import the prot3d module
import os
libpath = os.path.normpath(                                                   \
            os.path.join(                                                     \
                os.path.dirname(os.path.abspath(os.path.realpath(__file__))), \
                '..')                                                         \
            )
import sys
sys.path.append(libpath)

import distutils.util
import argparse
import math

from prot3d._version import __version__

################################################################################
# BEG CLASS DEFINITIONS

class IDReadException(exception):
  pass

# END CLASS DEFINITIONS
################################################################################
################################################################################
# BEG HELPER FUNCTIONS

def _fix_dirname(dirname):
  """remove trailing path separater from directory name"""
  if dirname[-1] == os.path.sep:
    return dirname[:-1]
  return dirname

def _count_ss(id, datadir, outdict):
  with open(datadir + os.path.sep + id + '.csv', 'r') as handle:
    handle.readline() # skip header
    for line in handle:
      ss = line.split(',')[1]
      if ss not in outdict.keys():
        outdict[ss] = 0
      outdict[ss] += 1
  return

def _calc_wts(tvtfname, datadir, outfname, verbose):
  # parse training data ids
  if verbose:
    sys.stdout.write('  parsing training data from {}...'.format(tvtfname))
    sys.stdout.flush()
  train_data_ids = []
  with open(tvtfname, 'r') as handle:
    line = handle.readline()
    while line.strip() != '#train':
      line = handle.readline()
    line = handle.readline()
    while line and line[0] != '#':
      train_data_ids.append(line.strip())
      line = handle.readline()
  if not train_data_ids:
    raise IDReadException('ERRR: no ids found in {}'.format(tvtfname))
  if verbose:
    sys.stdout.write('  done.\n')
  # get counts for each secondary structure type
  if verbose:
    sys.stdout.write('  counting secondary structure assignments...')
    sys.stdout.flush()
  ss_counts = {}
  for id in train_data_ids:
    _count_ss(id, datadir, ss_counts)
  # normalize counts to [0,1]
  total_count = 0
  for v in ss_counts.values():
    total_count += v
  ids = list(ss_counts.keys())
  ids.sort()
  with open(outf, 'w') as outf
    for id in ids:
      freq = ss_counts[id] / total_count
      outf.write('{},{:.5f}\n'.format(id,math.round(freq,5)))
      if verbose:
        sys.stdout.write('    {} {.4f} {}/{}\n'.format(id,
                                                       freq,
                                                       ss_counts[id],
                                                       total_count))
  if verbose:
    sys.stdout.write('  done.\n')
  return

# END HELPER FUNCTIONS
################################################################################
################################################################################
# BEG MAIN

if __name__ == '__main__':
  # parse command-line arguments
  parser = argparse.ArgumentParser(
                    description='calc sec str freqs from train data',
                    formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  # general options
  parser.add_argument('--version', action='version', version=__version__)
  parser.add_argument('-v', '--verbose', type=distutils.util.strtobool,
                      dest='verbose',
                      help='show runtime information on stdout',
                      metavar='y|n')
  parser.add_argument('-f', '--file', dest='tvtf',
                      help='set train-validate-test file name',
                      metavar='FILE', required=True)
  parser.add_argument('-o', '--outfile', dest='outf',
                      help='set output file name',
                      metavar='FILE', required=True)
  parser.add_argument('-d', '--datadir', dest='datadir',
                      help='set pdb data directory',
                      metavar='DIR', required=True)
  # set defaults
  parser.set_defaults(verbose=True,
                      tvtf=None,
                      outf=None,
                      datadir=None)
  # parse command-line arguments
  args = parser.parse_args()

  args.datadir = _fix_dir(args.datadir)

  if args.verbose:
    sys.stdout.write('calculating secondary structure weights...\n')
  try:
    _calc_wts(args.tvtf, args.datadir, args.outf, args.verbose)
  except Exception as e:
    sys.stderr.write('EXCEPTION: {}\n'.format(e))
    raise(e)

  if args.verbose:
    sys.stdout.write('finished.\n')

# END MAIN
################################################################################
